/**
 * This file is auto-generated by `smallstack gitflow`!
 */

import { ConfigurationService, IOC } from "@smallstack/core-common";
import { API, APIService, IAPIParams } from "@smallstack/meteor-server";
import * as semver from "semver";

interface ProjectVersions {
    smallstack: string;
    project: string;
}

export const versions: ProjectVersions = {
    smallstack: "0.9.15",
    project: "0.14.0"
};

IOC.onRegister("apiService", (apiService: APIService) => {
    apiService.createCallbackEndpoint(API.fromDocument<API>({ active: true, httpMethod: "GET", path: "/api/versions" }), (params: IAPIParams) => {
        return versions;
    });

    IOC.onRegister("configurationService", (configurationService: ConfigurationService) => {
        apiService.createCallbackEndpoint(API.fromDocument<API>({ active: true, httpMethod: "GET", path: "/api/versions/frontendcheck" }), (params: IAPIParams) => {
            if (!params.queryParams || params.queryParams.version === undefined)
                throw new Error("no frontend version given!");
            const version: string = configurationService.get("frontend.semver", versions.project);

            const satisfied: boolean = semver.satisfies(params.queryParams.version, version);
            if (satisfied)
                return true;
            throw new Error("Frontend version " + params.queryParams.version + " doesn't satisfy server version " + version + "!");
        });
    });
});

// tslint:disable:ordered-imports

/**
 * This file is auto-generated by "smallstack syncproject", but not executed/imported automatically!
 * You don't have to use this file at all, but it shows what to do to bootstrap smallstack in a meteor
 * environment on the client side.
 *
 * How-to use this file:
 *
 * import "./imports/initClient";
 * import { initClient, startClient } from "./imports/initClient";
 * (...)
 *
 * initClient();
 * startClient(AppComponent, additionalComponents);
 */

import "toastr";
import "zone.js";
import "reflect-metadata";
import "angular2-meteor-polyfills";
import { enableProdMode } from "@angular/core";
import { initCoreClient } from "@smallstack/core-client";
import { initCoreCommon } from "@smallstack/core-common";
import { NavigationService, LocalizationService, ConfigurationService } from "@smallstack/core-common";
import { IOC, InitLevelService } from "@smallstack/common";
import { bootstrapAngular, initMeteorClient } from "@smallstack/meteor-client";
import { initMeteorCommon } from "@smallstack/meteor-common";
import { createDatalayerCollections, registerDatalayerServices, initializeTypesystem } from "@smallstack/datalayer";

export function initClient() {

    if (Meteor.isProduction)
        enableProdMode();

    createDatalayerCollections();
    initMeteorCommon();
    initCoreCommon();
    initCoreClient();
    initMeteorClient();
    registerDatalayerServices();
    initializeTypesystem();

    IOC.onRegister("initLevelService", (initLevelService: InitLevelService) => {
        initLevelService.addInitLevelFn({
            level: 15,
            identifier: "I18N",
            fn: () => new Promise<void>((resolve, reject) => {
                const languageKey: string = LocalizationService.instance().getCurrentLanguage();
                LocalizationService.instance().getLocalizationsForLanguage({ languageKey }, { entriesPerPage: 5000000 }).subscribe(() => {
                    resolve();
                });
            })
        });
        initLevelService.addInitLevelFn({
            level: 10,
            identifier: "ConfigurationSync",
            fn: () => new Promise<void>((resolve, reject) => {
                ConfigurationService.instance().initOnClient((error: Error, result: any) => {
                    if (error)
                        reject(error);
                    else
                        resolve();
                });
            })
        });
    });
}

export function startClient(AppComponent: any, additionalComponents: any[]) {

    IOC.onRegister("initLevelService", (initLevelService: InitLevelService) => {
        IOC.onRegister("navigationService", (navigationService: NavigationService) => {

            initLevelService.addInitLevelFn({
                level: 100,
                identifier: "Angular2",
                fn: () => new Promise<void>((resolve, reject) => {
                    bootstrapAngular(AppComponent, additionalComponents, () => {
                        resolve();
                    });
                })
            });

            Meteor.startup(() => {
                initLevelService.execute();
            });
        });
    });

}
